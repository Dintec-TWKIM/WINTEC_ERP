USE [NEOE]
GO

/****** Object:  StoredProcedure [NEOE].[SP_CZ_FI_ALLOCA_MNGPL_S]    Script Date: 2017-04-21 오후 5:59:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [NEOE].[SP_CZ_FI_ALLOCA_MNGPL_S]
(
	@P_CD_COMPANY		NVARCHAR(7),   
	@P_CD_FSFORM		NVARCHAR(5), -- 양식코드
	@P_DT_BEFORE_FROM	NVARCHAR(8), 
	@P_DT_BEFORE_TO		NVARCHAR(8), 
	@P_DT_FROM			NVARCHAR(8), 
	@P_DT_TO			NVARCHAR(8), 
	@P_TP_UNIT			NVARCHAR(3), --단위구분
	@P_CODE_MULTI		TEXT,		 --관리내역
	@P_TP_COMMON		NVARCHAR(3), --배부구분
	@P_YN_UNIT			NVARCHAR(1), --배부단위표시여부
	@P_YN_GROUP			NVARCHAR(1)	 --배부단위그룹표시여부
)AS

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

DECLARE	@V_CD_FSFORM_B		NVARCHAR(5)
DECLARE	@V_TP_COMMON_PIPE	VARCHAR(30)

SET	@V_TP_COMMON_PIPE = (CASE @P_TP_COMMON WHEN '001' THEN 'XXX|'--배부전 PASS
										   WHEN '002' THEN '002|'--1차는 1차정보
										   WHEN '003' THEN '002|003|'--2차는 1,2차정보
										   WHEN '004' THEN '002|003|004|'--3차는 1,2,3차정보
										   WHEN '005' THEN '002|003|004|005|'--4차는 1,2,3,4차정보
										   WHEN '006' THEN '002|003|004|005|006|'--5차는 1,2,3,4,5차정보
										   ELSE 'XXX|' END)		 
  
EXEC UP_FI_GET_CD_FSFORM_B @P_CD_COMPANY, @P_CD_FSFORM, @V_CD_FSFORM_B OUTPUT 

SELECT TP_GRP,
	   CD_ACCT,
	   TP_PRINTTYPE,
	   CD_ACCOST,
	   TP_GUBUN INTO #계정들 
FROM NEOE.FN_FI_PL_ACCTCODE_S(@P_CD_COMPANY, @P_CD_FSFORM, @V_CD_FSFORM_B)

SELECT A.CD_ACCT,
	   SUM(CASE AC.TP_DRCR WHEN '1' THEN A.AM_DR_BEFORE ELSE A.AM_CR_BEFORE END) AM_AMT_BEFORE,
	   SUM(CASE AC.TP_DRCR WHEN '1' THEN A.AM_DR ELSE A.AM_CR END) AM_AMT
FROM (SELECT CD_ACCT,
			 SUM(CASE WHEN DT_ACCT BETWEEN @P_DT_BEFORE_FROM AND @P_DT_BEFORE_TO THEN AM_DR ELSE 0 END) AS AM_DR_BEFORE,
			 SUM(CASE WHEN DT_ACCT BETWEEN @P_DT_BEFORE_FROM AND @P_DT_BEFORE_TO THEN AM_CR ELSE 0 END) AS AM_CR_BEFORE,
			 SUM(CASE WHEN DT_ACCT BETWEEN @P_DT_FROM AND @P_DT_TO THEN AM_DR ELSE 0 END) AS AM_DR,
			 SUM(CASE WHEN DT_ACCT BETWEEN @P_DT_FROM AND @P_DT_TO THEN AM_CR ELSE 0 END) AS AM_CR
	  FROM FI_MNGSUM
	  WHERE	CD_COMPANY = @P_CD_COMPANY
	  AND CD_ACCT IN (SELECT CD_ACCT FROM #계정들)
	  GROUP BY CD_ACCT
	  UNION ALL		
	  SELECT CD_ACCT,
			 SUM(CASE WHEN YM_ALLOCA BETWEEN SUBSTRING(@P_DT_BEFORE_FROM, 1, 6) AND SUBSTRING(@P_DT_BEFORE_TO, 1, 6) THEN AM_ALLOCA ELSE 0 END) AS AM_DR_BEFORE,
			 SUM(CASE WHEN YM_ALLOCA BETWEEN SUBSTRING(@P_DT_BEFORE_FROM, 1, 6) AND SUBSTRING(@P_DT_BEFORE_TO, 1, 6) THEN AM_ALLOCA ELSE 0 END) AS AM_CR_BEFORE,
			 SUM(CASE WHEN YM_ALLOCA BETWEEN SUBSTRING(@P_DT_FROM, 1, 6) AND SUBSTRING(@P_DT_TO, 1, 6) THEN AM_ALLOCA ELSE 0 END) AS AM_DR,
			 SUM(CASE WHEN YM_ALLOCA BETWEEN SUBSTRING(@P_DT_FROM, 1, 6) AND SUBSTRING(@P_DT_TO, 1, 6) THEN AM_ALLOCA ELSE 0 END) AS AM_CR
	  FROM FI_ALLOCA
	  WHERE YM_ALLOCA BETWEEN SUBSTRING(@P_DT_FROM, 1, 6) AND SUBSTRING(@P_DT_TO, 1, 6)
	  AND TP_UNIT = @P_TP_UNIT 
	  AND CD_COMPANY = @P_CD_COMPANY
	  AND CD_ACCT IN (SELECT CD_ACCT FROM #계정들)
	  AND TP_COMMON IN (SELECT CD_STR FROM GETTABLEFROMSPLIT(@V_TP_COMMON_PIPE))
	  GROUP BY CD_ACCT) A
JOIN DZSN_FI_ACCTCODE AC ON AC.CD_COMPANY = @P_CD_COMPANY AND A.CD_ACCT = AC.CD_ACCT			
GROUP BY A.CD_ACCT

---------------------------------- 예외처리 ------------------------
--- 특정 고객사에 서버에 collate와 NEOE collate가 달라
--- 충돌오류가 발생합니다
--- 서버 전체에 collate를 바꿔야 하지만 리스크가 큰작업이라 우선
--- 임시방편으로 처리하였습니다.
-------------------------------------------------------------------

--CREATE TABLE  #RET
--(  
--	CD_ACCT NVARCHAR(10)	collate Korean_Wansung_CI_AS,  
--	CD_CODE NVARCHAR(20)	collate Korean_Wansung_CI_AS,  
--	DR_SUM  NUMERIC(19,4),  
--	CR_SUM  NUMERIC(19,4)  
--)


---- DROP TABLE #RET
CREATE TABLE #RET
(  
	CD_ACCT	NVARCHAR(10),  
	CD_CODE NVARCHAR(20),  
	DR_SUM  NUMERIC(19,4),  
	CR_SUM  NUMERIC(19,4) 
)

CREATE TABLE #RET1
(  
	CD_ACCT	NVARCHAR(10),  
	CD_CODE NVARCHAR(20),  
	DR_SUM  NUMERIC(19,4),  
	CR_SUM  NUMERIC(19,4) 
)

--전기
INSERT #RET EXEC UP_FI_PLMNG_SUM_ALLO @P_CD_COMPANY, @P_CD_FSFORM, @P_DT_BEFORE_FROM, @P_DT_BEFORE_TO, @P_TP_UNIT, @P_TP_COMMON, @P_CODE_MULTI

--당기
INSERT #RET1 EXEC UP_FI_PLMNG_SUM_ALLO @P_CD_COMPANY, @P_CD_FSFORM, @P_DT_FROM, @P_DT_TO, @P_TP_UNIT, @P_TP_COMMON, @P_CODE_MULTI

IF @P_YN_GROUP = 'Y' AND @P_YN_UNIT = 'Y'
BEGIN
	SELECT A.CD_ACCT,
		   A.CD_CODE,
		   'N' AS YN_GROUP,
		   SUM(CASE WHEN A.TP_GUBUN = '1' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT_BEFORE,
		   SUM(CASE WHEN A.TP_GUBUN = '2' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT
	FROM (SELECT *, '1' AS TP_GUBUN 
		  FROM #RET
		  UNION ALL
		  SELECT *, '2' AS TP_GUBUN 
		  FROM #RET1) A
	JOIN DZSN_FI_ACCTCODE AC ON AC.CD_COMPANY = @P_CD_COMPANY AND A.CD_ACCT = AC.CD_ACCT	
	GROUP BY A.CD_ACCT, A.CD_CODE
	HAVING SUM(CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM ELSE A.CR_SUM END) <> 0
	UNION ALL
	SELECT A.CD_ACCT,
		   AG.CD_ALLOCAGRP AS CD_CODE,
		   'Y' AS YN_GROUP,
		   SUM(CASE WHEN A.TP_GUBUN = '1' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT_BEFORE,
		   SUM(CASE WHEN A.TP_GUBUN = '2' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT
	FROM (SELECT *, '1' AS TP_GUBUN 
		  FROM #RET
		  UNION ALL
		  SELECT *, '2' AS TP_GUBUN 
		  FROM #RET1) A
	JOIN DZSN_FI_ACCTCODE AC ON AC.CD_COMPANY = @P_CD_COMPANY AND A.CD_ACCT = AC.CD_ACCT
	JOIN (SELECT AD.CD_COMPANY, AD.TP_UNIT, AD.CD_ALLOCAUNIT,
	      		 MAX(AH.CD_ALLOCAGRP) AS CD_ALLOCAGRP
	      FROM FI_ALLOCAGRPD AD
		  LEFT JOIN FI_ALLOCAGRP AH ON AH.CD_COMPANY = AD.CD_COMPANY AND AH.TP_UNIT = AD.TP_UNIT AND AH.CD_ALLOCAGRP = AD.CD_ALLOCAGRP
		  WHERE AH.YN_USE = 'Y'
	      GROUP BY AD.CD_COMPANY, AD.TP_UNIT, AD.CD_ALLOCAUNIT) AS AG
	ON AG.CD_COMPANY = @P_CD_COMPANY AND AG.TP_UNIT = @P_TP_UNIT AND AG.CD_ALLOCAUNIT = A.CD_CODE
	GROUP BY A.CD_ACCT, AG.CD_ALLOCAGRP
	HAVING SUM(CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM ELSE A.CR_SUM END) <> 0
END
ELSE IF @P_YN_GROUP = 'Y' AND @P_YN_UNIT = 'N'
BEGIN
	SELECT A.CD_ACCT,
		   AG.CD_ALLOCAGRP AS CD_CODE,
		   'Y' AS YN_GROUP,
		   SUM(CASE WHEN A.TP_GUBUN = '1' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT_BEFORE,
		   SUM(CASE WHEN A.TP_GUBUN = '2' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT
	FROM (SELECT *, '1' AS TP_GUBUN 
		  FROM #RET
		  UNION ALL
		  SELECT *, '2' AS TP_GUBUN 
		  FROM #RET1) A
	JOIN DZSN_FI_ACCTCODE AC ON AC.CD_COMPANY = @P_CD_COMPANY AND A.CD_ACCT = AC.CD_ACCT
	JOIN (SELECT AD.CD_COMPANY, AD.TP_UNIT, AD.CD_ALLOCAUNIT,
	      		 MAX(AH.CD_ALLOCAGRP) AS CD_ALLOCAGRP
	      FROM FI_ALLOCAGRPD AD
		  LEFT JOIN FI_ALLOCAGRP AH ON AH.CD_COMPANY = AD.CD_COMPANY AND AH.TP_UNIT = AD.TP_UNIT AND AH.CD_ALLOCAGRP = AD.CD_ALLOCAGRP
		  WHERE AH.YN_USE = 'Y'
	      GROUP BY AD.CD_COMPANY, AD.TP_UNIT, AD.CD_ALLOCAUNIT) AS AG
	ON AG.CD_COMPANY = @P_CD_COMPANY AND AG.TP_UNIT = @P_TP_UNIT AND AG.CD_ALLOCAUNIT = A.CD_CODE
	GROUP BY A.CD_ACCT, AG.CD_ALLOCAGRP
	HAVING SUM(CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM ELSE A.CR_SUM END) <> 0
END
ELSE
BEGIN
	SELECT A.CD_ACCT,
		   A.CD_CODE,
		   'N' AS YN_GROUP,
		   SUM(CASE WHEN A.TP_GUBUN = '1' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT_BEFORE,
		   SUM(CASE WHEN A.TP_GUBUN = '2' THEN (CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM 
																		 ELSE A.CR_SUM END) ELSE 0 END) AS AM_AMT
	FROM (SELECT *, '1' AS TP_GUBUN 
		  FROM #RET
		  UNION ALL
		  SELECT *, '2' AS TP_GUBUN 
		  FROM #RET1) A
	JOIN DZSN_FI_ACCTCODE AC ON AC.CD_COMPANY = @P_CD_COMPANY AND A.CD_ACCT = AC.CD_ACCT	
	GROUP BY A.CD_ACCT, A.CD_CODE
	HAVING SUM(CASE AC.TP_DRCR WHEN '1' THEN A.DR_SUM ELSE A.CR_SUM END) <> 0
END

GO