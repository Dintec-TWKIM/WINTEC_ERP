USE [NEOE]
GO

/****** Object:  StoredProcedure [NEOE].[SP_CZ_SA_FORWARD_CHARGE_L_S]    Script Date: 2016-06-27 오후 5:01:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [NEOE].[SP_CZ_SA_FORWARD_CHARGE_L_S]          
(  
	@P_CD_COMPANY		NVARCHAR(7),
	@P_CD_PARTNER		NVARCHAR(20),
	@P_TP_DELIVERY		NVARCHAR(4),
	@P_DT_MONTH			NVARCHAR(6),
	@P_NO_IO			NVARCHAR(20)
)  
AS

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT 'N' AS S,
	   CL.CD_PARTNER,
	   CL.TP_DELIVERY,
	   CL.DT_MONTH,
	   CL.SEQ,
	   CL.NO_BL,
	   CL.NO_REF,
	   CL.NO_IO,
	   (CASE WHEN (@P_TP_DELIVERY = 'TEB' OR
				   @P_TP_DELIVERY = 'TEB2' OR
				   @P_TP_DELIVERY = 'QCK' OR
				   @P_TP_DELIVERY = 'TRK' OR
				   @P_TP_DELIVERY = 'SHIP' OR
				   @P_TP_DELIVERY = 'BWH' OR
				   @P_TP_DELIVERY = 'SP1' OR
				   @P_TP_DELIVERY = 'TRK1' OR
				   @P_TP_DELIVERY = 'TRK2' OR
				   @P_TP_DELIVERY = 'TEB1' OR
				   @P_TP_DELIVERY = 'TEB3' OR
				   @P_TP_DELIVERY = 'INB' OR
				   (@P_TP_DELIVERY = 'AIR' AND @P_CD_PARTNER = '12448')) 
				   AND @P_CD_PARTNER <> '02436' THEN (CASE WHEN SL.AM_SO IS NOT NULL THEN SL.AM_SO
														   WHEN PL.AM_PO IS NOT NULL THEN PL.AM_PO
																		 		     WHEN MC.CD_CC IS NOT NULL THEN 0 ELSE -1 END)
														   ELSE ISNULL(OL.AM_IO, -1) END) AS AM_IO,
	   CL.DT_FORWARD,
	   CL.AM_CHARGE,
	   CL.AM_ETC,
	   CL.AM_VAT_WEEK,
	   CL.AM_WEEK,
	   (ISNULL(CL.AM_WEEK, 0) + ISNULL(CL.AM_VAT_WEEK, 0)) AS AM_WEEK_TOTAL,
	   CL.AM_CHARGE_MONTH,
	   CL.AM_ETC_MONTH,
	   CL.AM_VAT_MONTH,
	   CL.AM_VAT_TARGET,
	   CL.AM_WFG,
	   CL.AM_MONTH,
	   (ISNULL(CL.AM_MONTH, 0) + ISNULL(CL.AM_VAT_MONTH, 0)) AS AM_MONTH_TOTAL,
	   CL.AM_TAX_MONTH,
	   CL.AM_FULL,
	   CL.RT_DC,
	   CL.RT_DC_IV,
	   CL.AM_IV,
	   CL.AM_TAX,
	   OL.AM_CLS,
	   OL.AM_CLS_AUTO,
	   (ISNULL(OL.AM_CLS, 0) - (ISNULL(CL.AM_IV, 0) + ISNULL(CL.AM_TAX, 0))) AS AM_DIFF,
	   CL.WEIGHT,
	   CL.ZONE,
	   CL.RT_FSC,
	   CL.AM_ZONE,
	   CL.DT_TAX_MONTH,
	   CL.SEQ_TAX_MONTH,
	   CL.NM_NOTE,
	   CL.NO_MDOCU,
	   (SELECT MAX(FD.NO_DOCU) 
		FROM FI_DOCU FD
		WHERE FD.CD_COMPANY = CL.CD_COMPANY
		AND FD.NO_MDOCU = CL.NO_MDOCU) AS NO_DOCU,
	   PC.CD_PC,
	   CL.DC_RMK
FROM CZ_SA_FORWARD_CHARGE_L CL
LEFT JOIN (SELECT OH.CD_COMPANY, OH.NO_IO,
		   	      SUM(CASE WHEN IL.CD_ITEM LIKE 'SD%' THEN 0 ELSE (CASE WHEN OH.YN_RETURN = 'Y' THEN -1 ELSE 1 END) * OL.AM END) AS AM_IO,
				  SUM(CASE WHEN IL.CD_ITEM = 'SD0001' THEN IL.AM_CLS ELSE 0 END) AS AM_CLS,
				  SUM(CASE WHEN IL.CD_ITEM = 'SD0001' AND IL.CD_USERDEF1 = 'Y' THEN IL.AM_CLS ELSE 0 END) AS AM_CLS_AUTO
		   FROM MM_QTIOH OH
		   JOIN MM_QTIO OL ON OL.CD_COMPANY = OH.CD_COMPANY AND OL.NO_IO = OH.NO_IO
		   LEFT JOIN SA_IVL IL ON IL.CD_COMPANY = OL.CD_COMPANY AND IL.NO_IO = OL.NO_IO AND IL.NO_IOLINE = OL.NO_IOLINE
		   LEFT JOIN CZ_SA_GIRH_WORK_DETAIL GD ON GD.CD_COMPANY = OL.CD_COMPANY AND GD.NO_GIR = OL.NO_ISURCV
		   LEFT JOIN (SELECT EX.CD_COMPANY, EX.YYMMDD, EX.CURR_SOUR,
		   		   	         (CASE WHEN CURR_SOUR = '002' THEN RATE_BASE ELSE ROUND(RATE_BASE, 2) END) AS RT_EXCH
		   		      FROM MA_EXCHANGE EX
		   		      WHERE EX.NO_SEQ = '1'
		   		      AND EX.CURR_DEST = '000') EX
		   ON EX.CD_COMPANY = GD.CD_COMPANY AND EX.YYMMDD = GD.DT_LOADING AND EX.CURR_SOUR = OL.CD_EXCH
		   GROUP BY OH.CD_COMPANY, OH.NO_IO) OL
ON OL.CD_COMPANY = CL.CD_COMPANY AND OL.NO_IO = CL.NO_IO
LEFT JOIN (SELECT SL.CD_COMPANY, SL.NO_SO,
				  SUM(SL.AM_WONAMT) AS AM_SO
		   FROM SA_SOL SL
		   GROUP BY SL.CD_COMPANY, SL.NO_SO) SL
ON SL.CD_COMPANY = CL.CD_COMPANY AND SL.NO_SO = CL.NO_IO
LEFT JOIN (SELECT PL.CD_COMPANY, PL.NO_PO,
				  SUM(PL.AM) AS AM_PO
		   FROM PU_POL PL
		   GROUP BY PL.CD_COMPANY, PL.NO_PO) PL
ON PL.CD_COMPANY = CL.CD_COMPANY AND PL.NO_PO = CL.NO_IO
LEFT JOIN MA_CC MC ON MC.CD_COMPANY = CL.CD_COMPANY AND MC.CD_CC = CL.NO_IO
LEFT JOIN MA_PC PC ON PC.CD_COMPANY = CL.CD_COMPANY
WHERE CL.CD_COMPANY = @P_CD_COMPANY
AND CL.CD_PARTNER = @P_CD_PARTNER
AND CL.TP_DELIVERY = @P_TP_DELIVERY
AND CL.DT_MONTH = @P_DT_MONTH
AND (ISNULL(@P_NO_IO, '') = '' OR CL.NO_IO = @P_NO_IO)
ORDER BY CL.SEQ ASC

GO