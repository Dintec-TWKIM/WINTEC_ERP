USE [NEOE]
GO

/****** Object:  StoredProcedure [NEOE].[SP_CZ_PU_PO_TP_PO_U]    Script Date: 2017-02-17 오전 11:39:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- EXEC SP_CZ_PU_PO_TP_PO_U 'K100', 'FB569418', '2200'
ALTER PROCEDURE [NEOE].[SP_CZ_PU_PO_TP_PO_U]
(
    @P_CD_COMPANY   NVARCHAR(7),
    @P_NO_PO        NVARCHAR(20),
	@P_TP_PO		NVARCHAR(4)
)
AS

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

DECLARE @V_ERRMSG   VARCHAR(255),   -- ERROR 메시지
		@V_NO_KEY	NVARCHAR(20)   

BEGIN TRAN SP_CZ_PU_PO_TP_PO_U
BEGIN TRY

IF EXISTS (SELECT 1 
		   FROM PU_IVL 
		   WHERE CD_COMPANY = @P_CD_COMPANY 
		   AND NO_PO = @P_NO_PO
		   AND YN_RETURN = 'N')
BEGIN
	SELECT @V_ERRMSG = '매입 등록된 발주건 입니다. 매입 취소후 변경 하시기 바랍니다.'                      
	GOTO ERROR
END

PRINT '-- 발주'

UPDATE PH
SET PH.CD_TPPO = TP.CD_TPPO,
	PH.YN_AM = TP.YN_AM,
	PH.FG_TRANS = TP.FG_TRANS
FROM PU_POH PH
LEFT JOIN PU_TPPO TP ON TP.CD_COMPANY = PH.CD_COMPANY AND TP.CD_TPPO = @P_TP_PO
WHERE PH.CD_COMPANY = @P_CD_COMPANY
AND PH.NO_PO = @P_NO_PO

UPDATE PL
SET PL.FG_RCV = TP.FG_TPRCV,
	PL.FG_PURCHASE = TP.FG_TPPURCHASE,
	PL.YN_AUTORCV = TP.YN_AUTORCV,
	PL.YN_RCV = TP.YN_RCV,
	PL.YN_RETURN = TP.YN_RETURN,
	PL.YN_ORDER = TP.YN_ORDER,
	PL.YN_SUBCON = TP.YN_SUBCON,
	PL.YN_IMPORT = TP.YN_IMPORT,
	PL.YN_REQ = TP.YN_REQ,
	PL.FG_POST = (CASE WHEN TP.YN_ORDER = 'Y' THEN 'R' ELSE 'O' END),
	PL.FG_POCON = (CASE WHEN TP.YN_ORDER = 'Y' THEN '002' ELSE '001' END)
FROM PU_POL PL
JOIN PU_POH PH ON PH.CD_COMPANY = PL.CD_COMPANY AND PH.NO_PO = PL.NO_PO
LEFT JOIN PU_TPPO TP ON TP.CD_COMPANY = PH.CD_COMPANY AND TP.CD_TPPO = PH.CD_TPPO
WHERE PL.CD_COMPANY = @P_CD_COMPANY
AND PL.NO_PO = @P_NO_PO

PRINT '-- 입고의뢰'

IF EXISTS (SELECT RL.CD_COMPANY, RL.NO_RCV, COUNT(DISTINCT RL.NO_PO)
		   FROM PU_RCVL RL
		   LEFT JOIN PU_RCVH RH ON RH.CD_COMPANY = RL.CD_COMPANY AND RH.NO_RCV = RL.NO_RCV
		   WHERE RL.CD_COMPANY = @P_CD_COMPANY
		   AND RL.NO_RCV IN (SELECT DISTINCT NO_RCV
		   					 FROM PU_RCVL
		   					 WHERE CD_COMPANY = @P_CD_COMPANY
		   					 AND NO_PO = @P_NO_PO)
		   AND RH.YN_RETURN = 'N'
		   GROUP BY RL.CD_COMPANY, RL.NO_RCV
		   HAVING COUNT(DISTINCT RL.NO_PO) > 1)
BEGIN
	SELECT @V_ERRMSG = '여러건 합쳐서 의뢰된 발주건 입니다.'                      
	GOTO ERROR
END
ELSE
BEGIN
	UPDATE RH
	SET RH.YN_AM = PH.YN_AM,
		RH.FG_TRANS = PH.FG_TRANS,
		RH.FG_RCV = PL.FG_RCV,
		RH.YN_RETURN = PL.YN_RETURN
	FROM PU_RCVH RH
	JOIN PU_RCVL RL ON RL.CD_COMPANY = RH.CD_COMPANY AND RL.NO_RCV = RH.NO_RCV
	JOIN PU_POL PL ON PL.CD_COMPANY = RL.CD_COMPANY AND PL.NO_PO = RL.NO_PO AND PL.NO_LINE = RL.NO_LINE
	JOIN PU_POH PH ON PH.CD_COMPANY = PL.CD_COMPANY AND PH.NO_PO = PL.NO_PO
	WHERE RL.CD_COMPANY = @P_CD_COMPANY
	AND PL.NO_PO = @P_NO_PO
	AND RH.YN_RETURN = 'N'
END

UPDATE RL
SET RL.FG_TRANS = PH.FG_TRANS,
	RL.FG_RCV = PL.FG_RCV,
	RL.YN_PURCHASE = (CASE WHEN ISNULL(PL.FG_PURCHASE,'') = '' THEN 'N' ELSE 'Y' END),
	RL.FG_TPPURCHASE = PL.FG_PURCHASE,
	RL.YN_AUTORCV = PL.YN_AUTORCV,
	RL.YN_RETURN = PL.YN_RETURN,
	RL.NO_PO_MGMT = (CASE WHEN PL.YN_RETURN = 'Y' THEN PL.NO_PO ELSE '' END),
	RL.NO_POLINE_MGMT = (CASE WHEN PL.YN_RETURN = 'Y' THEN PL.NO_LINE ELSE 0 END),
	RL.YN_REQ = PL.YN_REQ,
	RL.FG_POST = PL.FG_POST
FROM PU_RCVL RL
LEFT JOIN PU_RCVH RH ON RH.CD_COMPANY = RL.CD_COMPANY AND RH.NO_RCV = RL.NO_RCV
JOIN PU_POL PL ON PL.CD_COMPANY = RL.CD_COMPANY AND PL.NO_PO = RL.NO_PO AND PL.NO_LINE = RL.NO_LINE
JOIN PU_POH PH ON PH.CD_COMPANY = PL.CD_COMPANY AND PH.NO_PO = PL.NO_PO
WHERE RL.CD_COMPANY = @P_CD_COMPANY
AND RL.NO_PO = @P_NO_PO
AND RH.YN_RETURN = 'N'

PRINT '-- 입고'

IF EXISTS (SELECT OL.CD_COMPANY, OL.NO_IO, COUNT(DISTINCT OL.NO_PSO_MGMT)
		   FROM MM_QTIO OL
		   LEFT JOIN MM_QTIOH OH ON OH.CD_COMPANY = OL.CD_COMPANY AND OH.NO_IO = OL.NO_IO
		   WHERE OL.CD_COMPANY = @P_CD_COMPANY
		   AND OL.NO_IO IN (SELECT DISTINCT NO_IO
		   					FROM MM_QTIO
		   					WHERE CD_COMPANY = @P_CD_COMPANY
		   					AND NO_PSO_MGMT = @P_NO_PO)
		   AND OH.YN_RETURN = 'N'
		   GROUP BY OL.CD_COMPANY, OL.NO_IO
		   HAVING COUNT(DISTINCT OL.NO_PSO_MGMT) > 1)
BEGIN
	SELECT @V_ERRMSG = '여러건 합쳐서 입고된 발주건 입니다.'                      
	GOTO ERROR
END
ELSE
BEGIN
	UPDATE OH 
	SET OH.FG_TRANS = RL.FG_TRANS,
		OH.CD_QTIOTP = RH.FG_RCV,
		OH.YN_RETURN = RH.YN_RETURN
	FROM MM_QTIOH OH
	JOIN MM_QTIO OL ON OL.CD_COMPANY = OH.CD_COMPANY AND OL.NO_IO = OH.NO_IO
	JOIN PU_RCVL RL ON RL.CD_COMPANY = OL.CD_COMPANY AND RL.NO_RCV = OL.NO_ISURCV AND RL.NO_LINE = OL.NO_ISURCVLINE
	JOIN PU_RCVH RH ON RH.CD_COMPANY = RL.CD_COMPANY AND RH.NO_RCV = RL.NO_RCV
	WHERE OL.CD_COMPANY = @P_CD_COMPANY
	AND OL.NO_PSO_MGMT = @P_NO_PO
	AND OH.YN_RETURN = 'N'	
END

UPDATE OL
SET OL.YN_AM = RH.YN_AM,
	OL.FG_TRANS = RH.FG_TRANS,
	OL.CD_QTIOTP = RH.FG_RCV,
	OL.YN_PURSALE = RL.YN_PURCHASE,
	OL.FG_TPIO = RL.FG_TPPURCHASE
FROM MM_QTIO OL
JOIN MM_QTIOH OH ON OH.CD_COMPANY = OL.CD_COMPANY AND OH.NO_IO = OL.NO_IO
JOIN PU_RCVL RL ON RL.CD_COMPANY = OL.CD_COMPANY AND RL.NO_RCV = OL.NO_ISURCV AND RL.NO_LINE = OL.NO_ISURCVLINE
JOIN PU_RCVH RH ON RH.CD_COMPANY = RL.CD_COMPANY AND RH.NO_RCV = RL.NO_RCV
WHERE OL.CD_COMPANY = @P_CD_COMPANY
AND OL.NO_PSO_MGMT = @P_NO_PO
AND OH.YN_RETURN = 'N'

COMMIT TRAN SP_CZ_PU_PO_TP_PO_U

END TRY
BEGIN CATCH
	ROLLBACK TRAN SP_CZ_PU_PO_TP_PO_U
	SELECT @V_ERRMSG = ERROR_MESSAGE()
	GOTO ERROR
END CATCH

RETURN
ERROR: 
RAISERROR(@V_ERRMSG, 16, 1)
ROLLBACK TRAN SP_CZ_PU_PO_TP_PO_U


GO

