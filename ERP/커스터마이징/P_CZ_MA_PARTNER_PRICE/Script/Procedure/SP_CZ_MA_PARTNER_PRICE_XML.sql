USE [NEOE]
GO

/****** Object:  StoredProcedure [NEOE].[SP_CZ_MA_PARTNER_PRICE_XML]    Script Date: 2016-08-09 오후 4:28:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




ALTER PROCEDURE [NEOE].[SP_CZ_MA_PARTNER_PRICE_XML] 
(
	@P_XML			XML, 
	@P_ID_USER		NVARCHAR(10), 
    @DOC			INT = NULL
) 
AS 

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

EXEC SP_XML_PREPAREDOCUMENT @DOC OUTPUT, @P_XML

BEGIN TRAN SP_CZ_MA_PARTNER_PRICE_XML
BEGIN TRY

DECLARE @V_CD_ITEM NVARCHAR(20) = NULL
DECLARE @V_ERRMSG NVARCHAR(255)

;WITH AI AS
(
	SELECT * 
	FROM OPENXML (@DOC, '/XML/I', 2) 
         WITH (CD_COMPANY			NVARCHAR(7),
			   CD_PLANT			    NVARCHAR(7),
			   CD_PARTNER			NVARCHAR(20),
			   TP_UMMODULE			CHAR(3),
			   NO_LINE				NUMERIC(5, 0),
			   CD_ITEM				NVARCHAR(20),
			   FG_UM				NCHAR(3),
			   CD_EXCH				NVARCHAR(3),
			   UM_ITEM				NUMERIC(15, 4),
			   DC_PRICE_TERMS		NVARCHAR(20),
			   LT					NUMERIC(5, 0),
			   SDT_UM				NCHAR(8),
			   EDT_UM				NCHAR(8),
			   CD_EXCH_S			NVARCHAR(3),
			   UM_ITEM_S			NUMERIC(15, 4),
			   RT_PROFIT_A			NUMERIC(11, 4),
			   RT_PROFIT_B			NUMERIC(11, 4),
			   RT_PROFIT_C			NUMERIC(11, 4),
			   DC_RMK				NVARCHAR(100),
			   TXT_USERDEF1			NVARCHAR(300))
),
AU AS
(
	SELECT * 
	FROM OPENXML (@DOC, '/XML/U', 2) 
         WITH (CD_COMPANY			NVARCHAR(7),
			   CD_PLANT			    NVARCHAR(7),
			   CD_PARTNER			NVARCHAR(20),
			   TP_UMMODULE			CHAR(3),
			   NO_LINE				NUMERIC(5, 0),
			   CD_ITEM				NVARCHAR(20),
			   FG_UM				NCHAR(3),
			   CD_EXCH				NVARCHAR(3),
			   UM_ITEM				NUMERIC(15, 4),
			   DC_PRICE_TERMS		NVARCHAR(20),
			   LT					NUMERIC(5, 0),
			   SDT_UM				NCHAR(8),
			   EDT_UM				NCHAR(8),
			   CD_EXCH_S			NVARCHAR(3),
			   UM_ITEM_S			NUMERIC(15, 4),
			   RT_PROFIT_A			NUMERIC(11, 4),
			   RT_PROFIT_B			NUMERIC(11, 4),
			   RT_PROFIT_C			NUMERIC(11, 4),
			   DC_RMK				NVARCHAR(100),
			   TXT_USERDEF1			NVARCHAR(300))
),
A0 AS
(
	SELECT * FROM AI
	UNION ALL
	SELECT * FROM AU
),
A AS
(
	SELECT A.CD_COMPANY, 
		   A.CD_PLANT,
		   A.CD_PARTNER,
		   A.TP_UMMODULE,
		   A.CD_ITEM,
		   A.DC_PRICE_TERMS,
		   A.SDT_UM,
		   A.EDT_UM
	FROM MA_ITEM_UMPARTNER A
	WHERE EXISTS (SELECT 1 
				  FROM A0 B 
				  WHERE B.CD_COMPANY = A.CD_COMPANY 
				  AND B.CD_PLANT = A.CD_PLANT 
				  AND B.CD_PARTNER = A.CD_PARTNER
				  AND B.TP_UMMODULE = A.TP_UMMODULE
				  AND B.CD_ITEM = A.CD_ITEM
				  AND ISNULL(B.DC_PRICE_TERMS, '') = ISNULL(A.DC_PRICE_TERMS, ''))
	AND NOT EXISTS (SELECT 1 
					FROM AU B
					WHERE B.CD_COMPANY = A.CD_COMPANY
					AND B.CD_PLANT = A.CD_PLANT
					AND B.CD_PARTNER = A.CD_PARTNER
					AND B.TP_UMMODULE = A.TP_UMMODULE
					AND B.CD_ITEM = A.CD_ITEM
					AND B.CD_EXCH = A.CD_EXCH
					AND B.SDT_UM = A.SDT_UM
					AND B.NO_LINE = A.NO_LINE
					AND (B.FG_UM = A.FG_UM OR (SELECT COUNT(1) 
							                   FROM MA_ITEM_UMPARTNER C
							                   WHERE C.CD_COMPANY = B.CD_COMPANY
							                   AND C.CD_PLANT = B.CD_PLANT
							                   AND C.CD_PARTNER = B.CD_PARTNER
							                   AND C.TP_UMMODULE = B.TP_UMMODULE
							                   AND C.CD_ITEM = B.CD_ITEM
							                   AND C.CD_EXCH = B.CD_EXCH 
							                   AND C.SDT_UM = B.SDT_UM
							                   AND C.NO_LINE = B.NO_LINE) = 1))
	UNION ALL
	SELECT A.CD_COMPANY, 
		   A.CD_PLANT,
		   A.CD_PARTNER,
		   A.TP_UMMODULE,
		   A.CD_ITEM,
		   A.DC_PRICE_TERMS,
		   A.SDT_UM,
		   A.EDT_UM
	FROM A0 A
),
B AS
(
	SELECT *,
		   ROW_NUMBER() OVER (PARTITION BY A.CD_COMPANY, A.CD_PLANT, A.CD_PARTNER, A.TP_UMMODULE, A.CD_ITEM, A.DC_PRICE_TERMS ORDER BY A.SDT_UM) AS IDX
	FROM A
)
SELECT @V_CD_ITEM = MAX(B.CD_ITEM) 
FROM B
JOIN B C ON C.CD_COMPANY = B.CD_COMPANY AND C.CD_PLANT = B.CD_PLANT AND C.CD_PARTNER = B.CD_PARTNER AND C.TP_UMMODULE = B.TP_UMMODULE AND C.CD_ITEM = B.CD_ITEM AND ISNULL(C.DC_PRICE_TERMS, '') = ISNULL(B.DC_PRICE_TERMS, '') AND C.IDX <> B.IDX
WHERE (B.SDT_UM > B.EDT_UM OR (B.SDT_UM <= C.EDT_UM AND B.EDT_UM >= C.SDT_UM))

IF @V_CD_ITEM IS NOT NULL
BEGIN
	SELECT @V_ERRMSG = '중복되는 품목이 존재 합니다. [' + @V_CD_ITEM + ']'
	GOTO ERROR
END

-- ================================================== DELETE
SELECT * INTO #XML 
FROM OPENXML (@DOC, '/XML/D', 2) 
	 WITH (CD_COMPANY		NVARCHAR(7),
		   CD_PLANT			NVARCHAR(7),
		   CD_PARTNER		NVARCHAR(20),
		   TP_UMMODULE		NCHAR(3),
		   NO_LINE			NUMERIC(5, 0),
		   CD_ITEM			NVARCHAR(20),
		   FG_UM		    NCHAR(3),
		   CD_EXCH			NVARCHAR(3),
		   SDT_UM			NCHAR(8))

DELETE UP
FROM MA_ITEM_UMPARTNER UP
JOIN #XML XL
ON UP.CD_COMPANY = XL.CD_COMPANY
AND UP.CD_PLANT = XL.CD_PLANT
AND UP.CD_PARTNER = XL.CD_PARTNER
AND UP.TP_UMMODULE = XL.TP_UMMODULE
AND UP.CD_ITEM = XL.CD_ITEM
AND UP.FG_UM = XL.FG_UM
AND UP.CD_EXCH = XL.CD_EXCH
AND UP.SDT_UM = XL.SDT_UM
AND UP.NO_LINE = XL.NO_LINE

UPDATE IU
SET IU.NO_LINE = IU.NO_LINE1
FROM (SELECT *, 
			 ROW_NUMBER() OVER (PARTITION BY CD_COMPANY, CD_PARTNER, CD_ITEM ORDER BY DTS_INSERT) AS NO_LINE1
	  FROM MA_ITEM_UMPARTNER IU
	  WHERE EXISTS (SELECT 1 
	  			    FROM #XML AS D
	  			    WHERE D.CD_COMPANY = IU.CD_COMPANY
	  			    AND D.CD_PARTNER = IU.CD_PARTNER
	  			    AND D.CD_ITEM = IU.CD_ITEM)) IU

DROP TABLE #XML;

-- ================================================== INSERT
WITH A AS
(
	SELECT * 
	FROM OPENXML (@DOC, '/XML/I', 2) 
         WITH (CD_COMPANY			NVARCHAR(7),
			   CD_PLANT			    NVARCHAR(7),
			   CD_PARTNER			NVARCHAR(20),
			   TP_UMMODULE			CHAR(3),
			   NO_LINE				NUMERIC(5, 0),
			   CD_ITEM				NVARCHAR(20),
			   FG_UM				NCHAR(3),
			   CD_EXCH				NVARCHAR(3),
			   UM_ITEM				NUMERIC(15, 4),
			   DC_PRICE_TERMS		NVARCHAR(20),
			   LT					NUMERIC(5, 0),
			   SDT_UM				NCHAR(8),
			   EDT_UM				NCHAR(8),
			   CD_EXCH_S			NVARCHAR(3),
			   UM_ITEM_S			NUMERIC(15, 4),
			   RT_PROFIT_A			NUMERIC(11, 4),
			   RT_PROFIT_B			NUMERIC(11, 4),
			   RT_PROFIT_C			NUMERIC(11, 4),
			   DC_RMK				NVARCHAR(100),
			   TXT_USERDEF1			NVARCHAR(300),
			   CD_PARTNER_STD		NVARCHAR(20))
),
B AS
(
	SELECT *, 
		   ROW_NUMBER() OVER (PARTITION BY CD_PARTNER, CD_ITEM ORDER BY DTS_INSERT) AS NO_LINE1 
	FROM (SELECT CD_COMPANY,
		         CD_PLANT,
		         CD_PARTNER,
		         TP_UMMODULE,
		         NO_LINE,
		         CD_ITEM,
		         FG_UM,
		         CD_EXCH,
		         UM_ITEM,
		         DC_PRICE_TERMS,
		         LT,
		         SDT_UM,
		         EDT_UM,
		         CD_EXCH_S,
		         UM_ITEM_S,
				 RT_PROFIT_A,
				 RT_PROFIT_B,
				 RT_PROFIT_C,
		         DC_RMK,
				 TXT_USERDEF1,
				 CD_PARTNER_STD,
		  	     ID_INSERT,
		  	     DTS_INSERT
		  FROM MA_ITEM_UMPARTNER IU
		  WHERE EXISTS (SELECT 1 
		  			    FROM A
		  			    WHERE CD_COMPANY = IU.CD_COMPANY
		  			    AND CD_PLANT = IU.CD_PLANT
		  			    AND CD_PARTNER = IU.CD_PARTNER
		  			    AND CD_ITEM = IU.CD_ITEM)
		  UNION ALL
		  SELECT *, 
		  	     @P_ID_USER AS ID_INSERT, 
		  	     NEOE.SF_SYSDATE(GETDATE()) AS DTS_INSERT 
		  FROM A) B
)

INSERT INTO MA_ITEM_UMPARTNER 
(
	CD_COMPANY,
	CD_PLANT,
	CD_PARTNER,
	TP_UMMODULE,
	NO_LINE,
	CD_ITEM,
	FG_UM,
	CD_EXCH,
	UM_ITEM,
	DC_PRICE_TERMS,
	LT,
	SDT_UM,
	EDT_UM,
	CD_EXCH_S,
	UM_ITEM_S,
	RT_PROFIT_A,
	RT_PROFIT_B,
	RT_PROFIT_C,
	DC_RMK,
	TXT_USERDEF1,
	CD_PARTNER_STD,
	ID_INSERT,
	DTS_INSERT
)
SELECT CD_COMPANY,
	   CD_PLANT,
	   CD_PARTNER,
	   TP_UMMODULE,
	   NO_LINE1,
	   CD_ITEM,
	   FG_UM,
	   CD_EXCH,
	   UM_ITEM,
	   DC_PRICE_TERMS,
	   LT,
	   SDT_UM,
	   EDT_UM,
	   CD_EXCH_S,
	   UM_ITEM_S,
	   RT_PROFIT_A,
	   RT_PROFIT_B,
	   RT_PROFIT_C,
	   DC_RMK,
	   TXT_USERDEF1,
	   CD_PARTNER_STD,
       ID_INSERT,
	   DTS_INSERT
FROM B UP
WHERE NO_LINE = 0

-- ================================================== UPDATE    
UPDATE UP 
   SET UP.FG_UM = XL.FG_UM,
	   UP.UM_ITEM = XL.UM_ITEM,
	   UP.DC_PRICE_TERMS = XL.DC_PRICE_TERMS,
	   UP.LT = XL.LT,
	   UP.EDT_UM = XL.EDT_UM,
	   UP.CD_EXCH_S = XL.CD_EXCH_S,
	   UP.UM_ITEM_S = XL.UM_ITEM_S,
	   UP.RT_PROFIT_A = XL.RT_PROFIT_A,
	   UP.RT_PROFIT_B = XL.RT_PROFIT_B,
	   UP.RT_PROFIT_C = XL.RT_PROFIT_C,
	   UP.DC_RMK = XL.DC_RMK,
	   UP.TXT_USERDEF1 = XL.TXT_USERDEF1,
	   UP.CD_PARTNER_STD = XL.CD_PARTNER_STD,
	   UP.ID_UPDATE = @P_ID_USER, 
	   UP.DTS_UPDATE = NEOE.SF_SYSDATE(GETDATE())
  FROM MA_ITEM_UMPARTNER UP
  JOIN OPENXML (@DOC, '/XML/U', 2) 
          WITH (CD_COMPANY			NVARCHAR(7),
				CD_PLANT			NVARCHAR(7),
				CD_PARTNER			NVARCHAR(20),
				TP_UMMODULE			CHAR(3),
				NO_LINE				NUMERIC(5, 0),
				CD_ITEM				NVARCHAR(20),
				FG_UM				NCHAR(3),
				CD_EXCH				NVARCHAR(3),
				UM_ITEM				NUMERIC(15, 4),
				DC_PRICE_TERMS		NVARCHAR(20),
				LT					NUMERIC(5, 0),
				SDT_UM				NCHAR(8),
				EDT_UM				NCHAR(8),
				CD_EXCH_S			NVARCHAR(3),
				UM_ITEM_S			NUMERIC(15, 4),
				RT_PROFIT_A			NUMERIC(11, 4),
				RT_PROFIT_B			NUMERIC(11, 4),
				RT_PROFIT_C			NUMERIC(11, 4),
				DC_RMK				NVARCHAR(100),
				TXT_USERDEF1		NVARCHAR(300),
				CD_PARTNER_STD		NVARCHAR(20)) XL 
  ON UP.CD_COMPANY = XL.CD_COMPANY
  AND UP.CD_PLANT = XL.CD_PLANT
  AND UP.CD_PARTNER = XL.CD_PARTNER
  AND UP.TP_UMMODULE = XL.TP_UMMODULE
  AND UP.CD_ITEM = XL.CD_ITEM
  AND UP.CD_EXCH = XL.CD_EXCH 
  AND UP.SDT_UM = XL.SDT_UM
  AND UP.NO_LINE = XL.NO_LINE
  AND (UP.FG_UM = XL.FG_UM OR (SELECT COUNT(1) 
							   FROM MA_ITEM_UMPARTNER A
							   WHERE A.CD_COMPANY = XL.CD_COMPANY
							   AND A.CD_PLANT = XL.CD_PLANT
							   AND A.CD_PARTNER = XL.CD_PARTNER
							   AND A.TP_UMMODULE = XL.TP_UMMODULE
							   AND A.CD_ITEM = XL.CD_ITEM
							   AND A.CD_EXCH = XL.CD_EXCH 
							   AND A.SDT_UM = XL.SDT_UM
							   AND A.NO_LINE = XL.NO_LINE) = 1)

EXEC SP_XML_REMOVEDOCUMENT @DOC

COMMIT TRAN SP_CZ_MA_PARTNER_PRICE_XML

END TRY
BEGIN CATCH
	ROLLBACK TRAN SP_CZ_MA_PARTNER_PRICE_XML
	SELECT @V_ERRMSG = ERROR_MESSAGE()
	GOTO ERROR
END CATCH

RETURN

ERROR: 
RAISERROR(@V_ERRMSG, 16, 1)
ROLLBACK TRAN SP_CZ_MA_PARTNER_PRICE_XML

GO